{"ast":null,"code":"var _jsxFileName = \"/Users/annikasingh/Desktop/hi/sudoku-git/sudoku/src/components/display/BoardDisplay.tsx\";\nimport { colors } from \"./SudokuBoard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BoardDisplay({\n  initial\n}) {\n  function boardFilled() {\n    // let completedBoard =initial.filter((box) => box.filter((item) => item.num == 0).length > 0).length == 0;\n\n    let flattenBoard = [];\n    initial.map(box => box.map(item => flattenBoard.push(item)));\n    if (completedBoard) {\n      let allNumbers = Array.from(Array(9).keys()).sort();\n      let conflict = false;\n      Array.from(Array(9).keys()).map(val => {\n        let rowConflict = flattenBoard.filter(item => item.row == val).map(item => item.num).sort() == allNumbers;\n        let colConflict = flattenBoard.filter(item => item.col == val).map(item => item.num).sort() == allNumbers;\n        let boxConflict = flattenBoard.filter(item => item.box == val).map(item => item.num).sort() == allNumbers;\n        if (rowConflict || colConflict || boxConflict) {\n          conflict = true;\n        }\n      });\n      if (conflict) {\n        console.log(\"yay\");\n      }\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: initial.map((box, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-box\",\n      id: index.toString(),\n      children: box.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cell-item\",\n        id: cellIndex.toString(),\n        style: {\n          backgroundColor: colors[index]\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          defaultValue: cell.num != 0 ? cell.num : \"\",\n          onChange: e => {\n            let numberValue = Number.parseInt(e.target.value);\n            if (numberValue <= 9 && numberValue >= 1 && e.target.value.match(/^\\d+$/) != null) {\n              initial[index][cellIndex].num = Number.parseInt(e.target.value);\n            } else if ((numberValue >= 9 || e.target.value.match(/^\\d+$/) == null) && e.target.value.match(/\\b/) != null && cell.num != 0) {\n              e.target.value = cell.num.toString();\n            } else {\n              e.target.value = \"\";\n            }\n            boardFilled();\n          },\n          className: \"input-cell\",\n          readOnly: initial[index][cellIndex].num != 0,\n          style: initial[index][cellIndex].num != 0 ? {\n            cursor: \"default\"\n          } : {}\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_c = BoardDisplay;\nvar _c;\n$RefreshReg$(_c, \"BoardDisplay\");","map":{"version":3,"names":["colors","jsxDEV","_jsxDEV","BoardDisplay","initial","boardFilled","flattenBoard","map","box","item","push","completedBoard","allNumbers","Array","from","keys","sort","conflict","val","rowConflict","filter","row","num","colConflict","col","boxConflict","console","log","className","children","index","id","toString","cell","cellIndex","style","backgroundColor","defaultValue","onChange","e","numberValue","Number","parseInt","target","value","match","readOnly","cursor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/annikasingh/Desktop/hi/sudoku-git/sudoku/src/components/display/BoardDisplay.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { colors } from \"./SudokuBoard\";\nimport { Board } from \"./SudokuBoard\";\n\ntype BoardProps = {\n  initial: Board[][];\n};\nexport default function BoardDisplay({ initial }: BoardProps) {\n  function boardFilled() {\n    // let completedBoard =initial.filter((box) => box.filter((item) => item.num == 0).length > 0).length == 0;\n\n    let flattenBoard: Board[] = [];\n    initial.map((box) => box.map((item) => flattenBoard.push(item)));\n    if (completedBoard) {\n      let allNumbers = Array.from(Array(9).keys()).sort();\n      let conflict = false;\n      Array.from(Array(9).keys()).map((val) => {\n        let rowConflict =\n          flattenBoard\n            .filter((item) => item.row == val)\n            .map((item) => item.num)\n            .sort() == allNumbers;\n        let colConflict =\n          flattenBoard\n            .filter((item) => item.col == val)\n            .map((item) => item.num)\n            .sort() == allNumbers;\n        let boxConflict =\n          flattenBoard\n            .filter((item) => item.box == val)\n            .map((item) => item.num)\n            .sort() == allNumbers;\n        if (rowConflict || colConflict || boxConflict) {\n          conflict = true;\n        }\n      });\n      if (conflict) {\n        console.log(\"yay\");\n      }\n    }\n  }\n\n  return (\n    <div className=\"board\">\n      {initial.map((box, index) => (\n        <div className=\"grid-box\" id={index.toString()}>\n          {box.map((cell, cellIndex) => (\n            <div\n              className=\"cell-item\"\n              id={cellIndex.toString()}\n              style={{ backgroundColor: colors[index] }}\n            >\n              <input\n                defaultValue={cell.num != 0 ? cell.num : \"\"}\n                onChange={(e) => {\n                  let numberValue = Number.parseInt(e.target.value);\n                  if (\n                    numberValue <= 9 &&\n                    numberValue >= 1 &&\n                    e.target.value.match(/^\\d+$/) != null\n                  ) {\n                    initial[index][cellIndex].num = Number.parseInt(\n                      e.target.value\n                    );\n                  } else if (\n                    (numberValue >= 9 ||\n                      e.target.value.match(/^\\d+$/) == null) &&\n                    e.target.value.match(/\\b/) != null &&\n                    cell.num != 0\n                  ) {\n                    e.target.value = cell.num.toString();\n                  } else {\n                    e.target.value = \"\";\n                  }\n                  boardFilled();\n                }}\n                className=\"input-cell\"\n                readOnly={initial[index][cellIndex].num != 0}\n                style={\n                  initial[index][cellIndex].num != 0\n                    ? { cursor: \"default\" }\n                    : {}\n                }\n              />\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}