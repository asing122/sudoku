{"ast":null,"code":"export function CreateBoard() {\n  let board = DiagonalBoxes();\n  /*for (let i = 0; i < 9; i++) {\n    board = [...board, ...CreateBox(board, i)] as Board[];\n  }\n  return board;*/\n  board = fillRestofBoard(board);\n  return board;\n}\n_c = CreateBoard;\nfunction DiagonalBoxes() {\n  let board = [];\n  for (let i = 0; i < 9; i += 4) {\n    let numbers = shuffleArray(Array.from(Array(9).keys()).map(num => num + 1));\n    for (let itemNumber = 0; itemNumber < 9; itemNumber++) {\n      let sudokuItem = numbers.pop() || 8;\n      let rowNumber = Math.floor(itemNumber / 3);\n      let colNumber = itemNumber % 3;\n      let boxNumber = i;\n      board.push({\n        box: boxNumber,\n        row: rowNumber,\n        num: sudokuItem,\n        col: colNumber\n      });\n    }\n  }\n  return board;\n}\n_c2 = DiagonalBoxes;\nfunction fillRestofBoard(board) {\n  const boxNumbers = Array.from(Array(9).keys()).filter(item => item % 4 != 0);\n  for (let i = 0; i < boxNumbers.length; i++) {\n    const boxNumber = boxNumbers[i];\n    let numbers = shuffleArray(Array.from(Array(9).keys()).map(num => num + 1));\n    let used = [];\n    for (let itemNumber = 0; itemNumber < 9; itemNumber++) {\n      let rowNumber = Math.floor(itemNumber / 3);\n      let colNumber = itemNumber % 3;\n      let rowConflict = num => board.filter(item => item.row == rowNumber && item.num == num).length > 0;\n      let colConflict = num => board.filter(item => item.col == colNumber && item.num == num).length > 0;\n      let boxConflict = num => board.filter(item => item.box == boxNumber && item.num == num).length > 0;\n      let sudokuItem = numbers.filter(num => !rowConflict(num) && !colConflict(num) && !boxConflict(num) && !used.includes(num))[0];\n      board.push({\n        box: boxNumber,\n        row: rowNumber,\n        col: colNumber,\n        num: sudokuItem\n      });\n      used.push(sudokuItem);\n    }\n  }\n  return board;\n}\nfunction CreateBox(board, row) {\n  let conflict = true;\n  let newRow = [];\n  while (conflict) {\n    let nums = Array.from(Array(9).keys()).map(num => num + 1);\n    let possibleIndices = shuffleArray(nums.map(item => item - 1));\n    for (let i = 0; i < 9; i++) {\n      let newItemNum = nums.pop() || 9;\n      let colNumber = possibleIndices.pop() || 8;\n      let rowNumber = row;\n      let boxNumber = Math.floor(colNumber / 3);\n      newRow.push({\n        num: newItemNum,\n        row: rowNumber,\n        col: colNumber,\n        box: boxNumber\n      });\n    }\n    conflict = false;\n    for (let i = 0; i < 9; i++) {\n      if (board.filter(item => item.col == newRow[i].col && item.num == newRow[i].num).length > 0 || board.filter(item => item.box == newRow[i].box && item.num == newRow[i].num).length > 0) {\n        conflict = true;\n      }\n    }\n  }\n  return newRow;\n}\n\n// From GeeksforGeeks\n_c3 = CreateBox;\nfunction shuffleArray(array) {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CreateBoard\");\n$RefreshReg$(_c2, \"DiagonalBoxes\");\n$RefreshReg$(_c3, \"CreateBox\");","map":{"version":3,"names":["CreateBoard","board","DiagonalBoxes","fillRestofBoard","_c","i","numbers","shuffleArray","Array","from","keys","map","num","itemNumber","sudokuItem","pop","rowNumber","Math","floor","colNumber","boxNumber","push","box","row","col","_c2","boxNumbers","filter","item","length","used","rowConflict","colConflict","boxConflict","includes","CreateBox","conflict","newRow","nums","possibleIndices","newItemNum","_c3","array","j","random","temp","$RefreshReg$"],"sources":["/Users/annikasingh/Desktop/hi/sudoku/src/components/CreateBoard.tsx"],"sourcesContent":["import { Board } from \"./TestBoard\";\n\nexport function CreateBoard(): Board[] {\n  let board: Board[] = DiagonalBoxes();\n  /*for (let i = 0; i < 9; i++) {\n    board = [...board, ...CreateBox(board, i)] as Board[];\n  }\n  return board;*/\n  board = fillRestofBoard(board);\n  return board;\n}\n\nfunction DiagonalBoxes(): Board[] {\n  let board: Board[] = [];\n  for (let i = 0; i < 9; i += 4) {\n    let numbers = shuffleArray(\n      Array.from(Array(9).keys()).map((num) => num + 1)\n    );\n    for (let itemNumber = 0; itemNumber < 9; itemNumber++) {\n      let sudokuItem = numbers.pop() || 8;\n      let rowNumber = Math.floor(itemNumber / 3);\n      let colNumber = itemNumber % 3;\n      let boxNumber = i;\n      board.push({\n        box: boxNumber,\n        row: rowNumber,\n        num: sudokuItem,\n        col: colNumber,\n      });\n    }\n  }\n  return board;\n}\n\nfunction fillRestofBoard(board: Board[]) {\n  const boxNumbers = Array.from(Array(9).keys()).filter(\n    (item) => item % 4 != 0\n  );\n  for (let i = 0; i < boxNumbers.length; i++) {\n    const boxNumber = boxNumbers[i];\n    let numbers = shuffleArray(\n      Array.from(Array(9).keys()).map((num) => num + 1)\n    );\n    let used = [];\n    for (let itemNumber = 0; itemNumber < 9; itemNumber++) {\n      let rowNumber = Math.floor(itemNumber / 3);\n      let colNumber = itemNumber % 3;\n      let rowConflict = (num: number) =>\n        board.filter((item) => item.row == rowNumber && item.num == num)\n          .length > 0;\n      let colConflict = (num: number) =>\n        board.filter((item) => item.col == colNumber && item.num == num)\n          .length > 0;\n      let boxConflict = (num: number) =>\n        board.filter((item) => item.box == boxNumber && item.num == num)\n          .length > 0;\n      let sudokuItem: number = numbers.filter(\n        (num) =>\n          !rowConflict(num) &&\n          !colConflict(num) &&\n          !boxConflict(num) &&\n          !used.includes(num)\n      )[0];\n      board.push({\n        box: boxNumber,\n        row: rowNumber,\n        col: colNumber,\n        num: sudokuItem,\n      });\n      used.push(sudokuItem);\n    }\n  }\n  return board;\n}\n\nfunction CreateBox(board: Board[], row: number): Board[] {\n  let conflict = true;\n  let newRow: Board[] = [];\n  while (conflict) {\n    let nums = Array.from(Array(9).keys()).map((num) => num + 1);\n    let possibleIndices = shuffleArray(nums.map((item) => item - 1));\n    for (let i = 0; i < 9; i++) {\n      let newItemNum = nums.pop() || 9;\n      let colNumber = possibleIndices.pop() || 8;\n      let rowNumber = row;\n      let boxNumber = Math.floor(colNumber / 3);\n      newRow.push({\n        num: newItemNum,\n        row: rowNumber,\n        col: colNumber,\n        box: boxNumber,\n      });\n    }\n    conflict = false;\n    for (let i = 0; i < 9; i++) {\n      if (\n        board.filter(\n          (item) => item.col == newRow[i].col && item.num == newRow[i].num\n        ).length > 0 ||\n        board.filter(\n          (item) => item.box == newRow[i].box && item.num == newRow[i].num\n        ).length > 0\n      ) {\n        conflict = true;\n      }\n    }\n  }\n  return newRow;\n}\n\n// From GeeksforGeeks\nfunction shuffleArray(array: any[]): any[] {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}