{"ast":null,"code":"// JS program to implement the approach\nexport class Sudoku {\n  // Constructor\n  constructor(N, K) {\n    this.N = void 0;\n    this.SRN = void 0;\n    this.mat = void 0;\n    this.N = 9;\n    // this.K = 40;\n\n    // Compute square root of N\n    this.SRN = 3;\n\n    // Initialize all entries as false to indicate\n    // that there are no edges initially\n    let sampleBoardItem = {\n      row: 0,\n      col: 0,\n      box: 0,\n      num: 0\n    };\n    this.mat = Array.from({\n      length: N * N\n    }, () => sampleBoardItem);\n  }\n\n  // Sudoku Generator\n  fillValues() {\n    // Fill the diagonal of SRN x SRN matrices\n    this.fillDiagonal();\n\n    // Fill remaining blocks\n    this.fillRemaining(0, this.SRN);\n  }\n\n  // Fill the diagonal SRN number of SRN x SRN matrices\n  fillDiagonal() {\n    for (let i = 0; i < this.N; i += this.SRN) {\n      // for diagonal box, start coordinates->i==j\n      this.fillBox(i, i, i);\n    }\n  }\n\n  // Returns false if given 3 x 3 block contains num.\n  unUsedInBox(rowStart, colStart, num) {\n    for (let i = 0; i < this.SRN; i++) {\n      for (let j = 0; j < this.SRN; j++) {\n        if (this.mat[(rowStart + i) * 9 + colStart + j].num === num) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  // Fill a 3 x 3 matrix.\n  fillBox(row, col, box) {\n    let num = 0;\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        while (true) {\n          num = this.randomGenerator(this.N);\n          if (this.unUsedInBox(row, col, num)) {\n            break;\n          }\n        }\n        this.mat[(row + i) * 9 + (col + j)] = {\n          row: row + i,\n          col: col + j,\n          box: box,\n          num: num\n        };\n      }\n    }\n  }\n\n  // Random generator\n  randomGenerator(num) {\n    return Math.floor(Math.random() * num + 1);\n  }\n\n  // Check if safe to put in cell\n  checkIfSafe(i, j, num) {\n    return this.unUsedInRow(i, num) && this.unUsedInCol(j, num) && this.unUsedInBox(i - i % this.SRN, j - j % this.SRN, num);\n  }\n\n  // check in the row for existence\n  unUsedInRow(i, num) {\n    for (let j = 0; j < this.N; j++) {\n      if (this.mat[i * 9 + j].num === num) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // check in the row for existence\n  unUsedInCol(j, num) {\n    for (let i = 0; i < this.N; i++) {\n      if (this.mat[i * 9 + j].num === num) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // A recursive function to fill remaining\n  // matrix\n  fillRemaining(i, j) {\n    // Check if we have reached the end of the matrix\n    if (i === this.N - 1 && j === this.N) {\n      return true;\n    }\n\n    // Move to the next row if we have reached the end of the current row\n    if (j === this.N) {\n      i += 1;\n      j = 0;\n    }\n\n    // Skip cells that are already filled\n    if (this.mat[i * 9 + j].num !== 0) {\n      return this.fillRemaining(i, j + 1);\n    }\n\n    // Try filling the current cell with a valid value\n    for (let num = 1; num <= this.N; num++) {\n      if (this.checkIfSafe(i, j, num)) {\n        this.mat[i * 9 + j] = {\n          row: i,\n          col: j,\n          box: ((i - i % 3) * 3 + j - j % 3) / 3,\n          num: num\n        };\n        if (this.fillRemaining(i, j + 1)) {\n          return true;\n        }\n        this.mat[i * 9 + j] = {\n          row: 0,\n          col: 0,\n          box: 0,\n          num: 0\n        };\n      }\n    }\n\n    // No valid value was found, so backtrack\n    return false;\n  }\n\n  // Print sudoku\n  // printSudoku() {\n  //   for (let i = 0; i < this.N; i++) {\n  //     console.log(this.mat[i].join(\" \"));\n  //   }\n  // }\n\n  // // Remove the K no. of digits to\n  // // complete game\n  // removeKDigits() {\n  //     let count = this.K;\n\n  //     while (count !== 0) {\n  //         // extract coordinates i and j\n  //         let i = Math.floor(Math.random() * this.N);\n  //         let j = Math.floor(Math.random() * this.N);\n  //         if (this.mat[i][j] !== 0) {\n  //             count--;\n  //             this.mat[i][j] = 0;\n  //         }\n  //     }\n\n  //     return;\n  // }\n}\n\n// // Driver code\n// let N = 9\n// let K = 40\n// let sudoku = new Sudoku(N, K)\n// sudoku.fillValues()\n// sudoku.printSudoku()\n\n// This code is contributed by phasing17.","map":{"version":3,"names":["Sudoku","constructor","N","K","SRN","mat","sampleBoardItem","row","col","box","num","Array","from","length","fillValues","fillDiagonal","fillRemaining","i","fillBox","unUsedInBox","rowStart","colStart","j","randomGenerator","Math","floor","random","checkIfSafe","unUsedInRow","unUsedInCol"],"sources":["/Users/annikasingh/Desktop/hi/sudoku/src/components/Sudoku.tsx"],"sourcesContent":["import { Board } from \"./TestCode\";\n\nexport type NewBoard = {\n  box: number;\n  num: number;\n};\n\n// JS program to implement the approach\nexport class Sudoku {\n  N: number;\n  SRN: number;\n  mat: Board[];\n  // Constructor\n  constructor(N: number, K: number) {\n    this.N = 9;\n    // this.K = 40;\n\n    // Compute square root of N\n    this.SRN = 3;\n\n    // Initialize all entries as false to indicate\n    // that there are no edges initially\n    let sampleBoardItem: Board = {\n      row: 0,\n      col: 0,\n      box: 0,\n      num: 0,\n    };\n    this.mat = Array.from(\n      {\n        length: N * N,\n      },\n      () => sampleBoardItem\n    );\n  }\n\n  // Sudoku Generator\n  fillValues() {\n    // Fill the diagonal of SRN x SRN matrices\n    this.fillDiagonal();\n\n    // Fill remaining blocks\n    this.fillRemaining(0, this.SRN);\n  }\n\n  // Fill the diagonal SRN number of SRN x SRN matrices\n  fillDiagonal() {\n    for (let i = 0; i < this.N; i += this.SRN) {\n      // for diagonal box, start coordinates->i==j\n      this.fillBox(i, i, i);\n    }\n  }\n\n  // Returns false if given 3 x 3 block contains num.\n  unUsedInBox(rowStart: number, colStart: number, num: number) {\n    for (let i = 0; i < this.SRN; i++) {\n      for (let j = 0; j < this.SRN; j++) {\n        if (this.mat[(rowStart + i) * 9 + colStart + j].num === num) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  // Fill a 3 x 3 matrix.\n  fillBox(row: number, col: number, box: number) {\n    let num = 0;\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        while (true) {\n          num = this.randomGenerator(this.N);\n          if (this.unUsedInBox(row, col, num)) {\n            break;\n          }\n        }\n        this.mat[(row + i) * 9 + (col + j)] = {\n          row: row + i,\n          col: col + j,\n          box: box,\n          num: num,\n        };\n      }\n    }\n  }\n\n  // Random generator\n  randomGenerator(num: number) {\n    return Math.floor(Math.random() * num + 1);\n  }\n\n  // Check if safe to put in cell\n  checkIfSafe(i: number, j: number, num: number) {\n    return (\n      this.unUsedInRow(i, num) &&\n      this.unUsedInCol(j, num) &&\n      this.unUsedInBox(i - (i % this.SRN), j - (j % this.SRN), num)\n    );\n  }\n\n  // check in the row for existence\n  unUsedInRow(i: number, num: number) {\n    for (let j = 0; j < this.N; j++) {\n      if (this.mat[i * 9 + j].num === num) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // check in the row for existence\n  unUsedInCol(j: number, num: number) {\n    for (let i = 0; i < this.N; i++) {\n      if (this.mat[i * 9 + j].num === num) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // A recursive function to fill remaining\n  // matrix\n  fillRemaining(i: number, j: number): boolean {\n    // Check if we have reached the end of the matrix\n    if (i === this.N - 1 && j === this.N) {\n      return true;\n    }\n\n    // Move to the next row if we have reached the end of the current row\n    if (j === this.N) {\n      i += 1;\n      j = 0;\n    }\n\n    // Skip cells that are already filled\n    if (this.mat[i * 9 + j].num !== 0) {\n      return this.fillRemaining(i, j + 1);\n    }\n\n    // Try filling the current cell with a valid value\n    for (let num = 1; num <= this.N; num++) {\n      if (this.checkIfSafe(i, j, num)) {\n        this.mat[i * 9 + j] = {\n          row: i,\n          col: j,\n          box: ((i - (i % 3)) * 3 + j - (j % 3)) / 3,\n          num: num,\n        };\n        if (this.fillRemaining(i, j + 1)) {\n          return true;\n        }\n        this.mat[i * 9 + j] = {\n          row: 0,\n          col: 0,\n          box: 0,\n          num: 0,\n        };\n      }\n    }\n\n    // No valid value was found, so backtrack\n    return false;\n  }\n\n  // Print sudoku\n  // printSudoku() {\n  //   for (let i = 0; i < this.N; i++) {\n  //     console.log(this.mat[i].join(\" \"));\n  //   }\n  // }\n\n  // // Remove the K no. of digits to\n  // // complete game\n  // removeKDigits() {\n  //     let count = this.K;\n\n  //     while (count !== 0) {\n  //         // extract coordinates i and j\n  //         let i = Math.floor(Math.random() * this.N);\n  //         let j = Math.floor(Math.random() * this.N);\n  //         if (this.mat[i][j] !== 0) {\n  //             count--;\n  //             this.mat[i][j] = 0;\n  //         }\n  //     }\n\n  //     return;\n  // }\n}\n\n// // Driver code\n// let N = 9\n// let K = 40\n// let sudoku = new Sudoku(N, K)\n// sudoku.fillValues()\n// sudoku.printSudoku()\n\n// This code is contributed by phasing17.\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}