{"ast":null,"code":"// JS program to implement the approach\nexport class Sudoku {\n  // Constructor\n  constructor() {\n    this.N = void 0;\n    this.SRN = void 0;\n    this.mat = void 0;\n    this.N = 9;\n    // this.K = 40;\n\n    // Compute square root of N\n    this.SRN = 3;\n\n    // Initialize all entries as false to indicate\n    // that there are no edges initially\n    let sampleBoardItem = {\n      row: 0,\n      col: 0,\n      box: -1,\n      num: 0\n    };\n    this.mat = Array.from({\n      length: this.N * this.N\n    }, () => sampleBoardItem);\n  }\n\n  // Sudoku Generator\n  fillValues() {\n    // Fill the diagonal of SRN x SRN matrices\n    this.DiagonalBoxes();\n\n    // Fill remaining blocks\n    this.fillRemaining(0, this.SRN);\n  }\n\n  // Fill the diagonal SRN number of SRN x SRN matrices\n  // fillDiagonal() {\n  //   for (let i = 0; i < this.N; i += this.SRN) {\n  //     // for diagonal box, start coordinates->i==j\n  //     this.fillBox(i, i, i);\n  //   }\n  // }\n\n  DiagonalBoxes() {\n    for (let i = 0; i < 9; i += 4) {\n      let numbers = shuffleArray(Array.from(Array(9).keys()).map(num => num + 1));\n      for (let itemNumber = 0; itemNumber < 9; itemNumber++) {\n        let sudokuItem = numbers.pop() || 8;\n        let rowNumber = Math.floor(itemNumber / 3) + Math.floor(i / 3) * 3;\n        let colNumber = itemNumber % 3 + Math.floor(i / 3) * 3;\n        let boxNumber = i;\n        this.mat[rowNumber * 9 + colNumber] = {\n          row: rowNumber,\n          col: colNumber,\n          box: boxNumber,\n          num: sudokuItem\n        };\n      }\n    }\n  }\n\n  // Returns false if given 3 x 3 block contains num.\n  unUsedInBox(box, num) {\n    return this.mat.filter(item => item.box == box && item.num == num).length == 0;\n  }\n\n  // Fill a 3 x 3 matrix.\n  fillBox(row, col, box) {\n    let num = 0;\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        while (true) {\n          num = this.randomGenerator(this.N);\n          if (this.unUsedInBox(box, num)) {\n            break;\n          }\n        }\n        this.mat[(row + i) * 9 + (col + j)] = {\n          row: row + i,\n          col: col + j,\n          box: box,\n          num: num\n        };\n      }\n    }\n  }\n\n  // Random generator\n  randomGenerator(num) {\n    return Math.floor(Math.random() * num + 1);\n  }\n\n  // Check if safe to put in cell\n  checkIfSafe(i, j, num) {\n    return this.unUsedInRow(i, num) && this.unUsedInCol(j, num) && this.unUsedInBox(Math.floor(i / 3) * 3 + Math.floor(j / 3), num);\n  }\n\n  // check in the row for existence\n  unUsedInRow(i, num) {\n    return this.mat.filter(item => item.row == i && item.num == num).length == 0;\n  }\n\n  // check in the row for existence\n  unUsedInCol(j, num) {\n    return this.mat.filter(item => item.col == j && item.num == num).length == 0;\n  }\n\n  // A recursive function to fill remaining\n  // matrix\n  fillRemaining(i, j) {\n    // Check if we have reached the end of the matrix\n    if (i === this.N - 1 && j === this.N) {\n      return true;\n    }\n\n    // Move to the next row if we have reached the end of the current row\n    if (j === this.N) {\n      i += 1;\n      j = 0;\n    }\n\n    // Skip cells that are already filled\n    if (this.mat[i * 9 + j].num !== 0) {\n      return this.fillRemaining(i, j + 1);\n    }\n\n    // Try filling the current cell with a valid value\n    for (let num = 1; num <= this.N; num++) {\n      if (this.checkIfSafe(i, j, num)) {\n        this.mat[i * 9 + j] = {\n          row: i,\n          col: j,\n          box: Math.floor(i / 3) * 3 + Math.floor(j / 3),\n          num: num\n        };\n        if (this.fillRemaining(i, j + 1)) {\n          return true;\n        }\n        this.mat[i * 9 + j] = {\n          row: 0,\n          col: 0,\n          box: 0,\n          num: 0\n        };\n      }\n    }\n\n    // No valid value was found, so backtrack\n    return false;\n  }\n\n  // Print sudoku\n  // printSudoku() {\n  //   for (let i = 0; i < this.N; i++) {\n  //     console.log(this.mat[i].join(\" \"));\n  //   }\n  // }\n\n  // // Remove the K no. of digits to\n  // // complete game\n  // removeKDigits() {\n  //     let count = this.K;\n\n  //     while (count !== 0) {\n  //         // extract coordinates i and j\n  //         let i = Math.floor(Math.random() * this.N);\n  //         let j = Math.floor(Math.random() * this.N);\n  //         if (this.mat[i][j] !== 0) {\n  //             count--;\n  //             this.mat[i][j] = 0;\n  //         }\n  //     }\n\n  //     return;\n  // }\n}\n\n// // Driver code\n// let N = 9\n// let K = 40\n// let sudoku = new Sudoku(N, K)\n// sudoku.fillValues()\n// sudoku.printSudoku()\n\n// This code is contributed by phasing17.\n\nfunction shuffleArray(array) {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}","map":{"version":3,"names":["Sudoku","constructor","N","SRN","mat","sampleBoardItem","row","col","box","num","Array","from","length","fillValues","DiagonalBoxes","fillRemaining","i","numbers","shuffleArray","keys","map","itemNumber","sudokuItem","pop","rowNumber","Math","floor","colNumber","boxNumber","unUsedInBox","filter","item","fillBox","j","randomGenerator","random","checkIfSafe","unUsedInRow","unUsedInCol","array","temp"],"sources":["/Users/annikasingh/Desktop/hi/sudoku/src/components/Sudoku.tsx"],"sourcesContent":["import { Board } from \"./TestCode\";\n\nexport type NewBoard = {\n  box: number;\n  num: number;\n};\n\n// JS program to implement the approach\nexport class Sudoku {\n  N: number;\n  SRN: number;\n  mat: Board[];\n  // Constructor\n  constructor() {\n    this.N = 9;\n    // this.K = 40;\n\n    // Compute square root of N\n    this.SRN = 3;\n\n    // Initialize all entries as false to indicate\n    // that there are no edges initially\n    let sampleBoardItem: Board = {\n      row: 0,\n      col: 0,\n      box: -1,\n      num: 0,\n    };\n    this.mat = Array.from(\n      {\n        length: this.N * this.N,\n      },\n      () => sampleBoardItem\n    );\n  }\n\n  // Sudoku Generator\n  fillValues() {\n    // Fill the diagonal of SRN x SRN matrices\n    this.DiagonalBoxes();\n\n    // Fill remaining blocks\n    this.fillRemaining(0, this.SRN);\n  }\n\n  // Fill the diagonal SRN number of SRN x SRN matrices\n  // fillDiagonal() {\n  //   for (let i = 0; i < this.N; i += this.SRN) {\n  //     // for diagonal box, start coordinates->i==j\n  //     this.fillBox(i, i, i);\n  //   }\n  // }\n\n  DiagonalBoxes() {\n    for (let i = 0; i < 9; i += 4) {\n      let numbers = shuffleArray(\n        Array.from(Array(9).keys()).map((num) => num + 1)\n      );\n      for (let itemNumber = 0; itemNumber < 9; itemNumber++) {\n        let sudokuItem = numbers.pop() || 8;\n        let rowNumber = Math.floor(itemNumber / 3) + Math.floor(i / 3) * 3;\n        let colNumber = (itemNumber % 3) + Math.floor(i / 3) * 3;\n        let boxNumber = i;\n        this.mat[rowNumber * 9 + colNumber] = {\n          row: rowNumber,\n          col: colNumber,\n          box: boxNumber,\n          num: sudokuItem,\n        };\n      }\n    }\n  }\n\n  // Returns false if given 3 x 3 block contains num.\n  unUsedInBox(box: number, num: number) {\n    return (\n      this.mat.filter((item) => item.box == box && item.num == num).length == 0\n    );\n  }\n\n  // Fill a 3 x 3 matrix.\n  fillBox(row: number, col: number, box: number) {\n    let num = 0;\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        while (true) {\n          num = this.randomGenerator(this.N);\n          if (this.unUsedInBox(box, num)) {\n            break;\n          }\n        }\n        this.mat[(row + i) * 9 + (col + j)] = {\n          row: row + i,\n          col: col + j,\n          box: box,\n          num: num,\n        };\n      }\n    }\n  }\n\n  // Random generator\n  randomGenerator(num: number) {\n    return Math.floor(Math.random() * num + 1);\n  }\n\n  // Check if safe to put in cell\n  checkIfSafe(i: number, j: number, num: number) {\n    return (\n      this.unUsedInRow(i, num) &&\n      this.unUsedInCol(j, num) &&\n      this.unUsedInBox(Math.floor(i / 3) * 3 + Math.floor(j / 3), num)\n    );\n  }\n\n  // check in the row for existence\n  unUsedInRow(i: number, num: number) {\n    return (\n      this.mat.filter((item) => item.row == i && item.num == num).length == 0\n    );\n  }\n\n  // check in the row for existence\n  unUsedInCol(j: number, num: number) {\n    return (\n      this.mat.filter((item) => item.col == j && item.num == num).length == 0\n    );\n  }\n\n  // A recursive function to fill remaining\n  // matrix\n  fillRemaining(i: number, j: number): boolean {\n    // Check if we have reached the end of the matrix\n    if (i === this.N - 1 && j === this.N) {\n      return true;\n    }\n\n    // Move to the next row if we have reached the end of the current row\n    if (j === this.N) {\n      i += 1;\n      j = 0;\n    }\n\n    // Skip cells that are already filled\n    if (this.mat[i * 9 + j].num !== 0) {\n      return this.fillRemaining(i, j + 1);\n    }\n\n    // Try filling the current cell with a valid value\n    for (let num = 1; num <= this.N; num++) {\n      if (this.checkIfSafe(i, j, num)) {\n        this.mat[i * 9 + j] = {\n          row: i,\n          col: j,\n          box: Math.floor(i / 3) * 3 + Math.floor(j / 3),\n          num: num,\n        };\n        if (this.fillRemaining(i, j + 1)) {\n          return true;\n        }\n        this.mat[i * 9 + j] = {\n          row: 0,\n          col: 0,\n          box: 0,\n          num: 0,\n        };\n      }\n    }\n\n    // No valid value was found, so backtrack\n    return false;\n  }\n\n  // Print sudoku\n  // printSudoku() {\n  //   for (let i = 0; i < this.N; i++) {\n  //     console.log(this.mat[i].join(\" \"));\n  //   }\n  // }\n\n  // // Remove the K no. of digits to\n  // // complete game\n  // removeKDigits() {\n  //     let count = this.K;\n\n  //     while (count !== 0) {\n  //         // extract coordinates i and j\n  //         let i = Math.floor(Math.random() * this.N);\n  //         let j = Math.floor(Math.random() * this.N);\n  //         if (this.mat[i][j] !== 0) {\n  //             count--;\n  //             this.mat[i][j] = 0;\n  //         }\n  //     }\n\n  //     return;\n  // }\n}\n\n// // Driver code\n// let N = 9\n// let K = 40\n// let sudoku = new Sudoku(N, K)\n// sudoku.fillValues()\n// sudoku.printSudoku()\n\n// This code is contributed by phasing17.\n\nfunction shuffleArray(array: any[]): any[] {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}