{"ast":null,"code":"var _jsxFileName = \"/Users/annikasingh/Desktop/hi/sudoku/src/components/Board.tsx\";\nimport \"../styles/board.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board() {\n  const colors = [\"#DAB49D\", \"#F29559\", \"#F2D492\", \"#A9C5A0\", \"#9DCBBA\", \"#779FA1\", \"#92817A\", \"#979B8D\", \"#F1DABF\" //#DAB49D pink\n  ];\n  let board = [];\n  let numberOptions = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  let initial = [];\n  let boxNumber = 0;\n  let rowNumber = 0;\n  let colNumber = 0;\n  let index = Math.floor(Math.random() * 8);\n  let rowConflict = false,\n    boxConflict = false,\n    colConflict = false;\n  for (let i = 0; i < 81; i++) {\n    rowNumber = Math.floor(i / 9);\n    colNumber = i % 3;\n    boxNumber++;\n    let conflict = true;\n    while (conflict) {\n      rowConflict = board.filter(item => item.row == rowNumber && item.num == index + 1).length > 0;\n      colConflict = board.filter(item => item.col == colNumber && item.num == index + 1).length > 0;\n      boxConflict = board.filter(item => item.box == boxNumber && item.num == index + 1).length > 0;\n      index = Math.floor(Math.random() * 8);\n      conflict = rowConflict || boxConflict || colConflict;\n    }\n    board.push({\n      num: index,\n      col: colNumber,\n      row: rowNumber,\n      box: boxNumber\n    });\n  }\n  console.log(board);\n  numberOptions.map(value => {\n    numberOptions.map((value, index) => {\n      let box = board.filter(item => item.box == index && item.num == numberOptions[index]).map(item => item.num);\n      initial.push(box);\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: initial.map((box, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-box\",\n        id: index.toString(),\n        children: box.map((cell, cellIndex) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cell-item\",\n            id: cellIndex.toString(),\n            style: {\n              backgroundColor: colors[index]\n            },\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              defaultValue: cell != 0 ? cell : \"\",\n              onChange: e => {\n                let numberValue = Number.parseInt(e.target.value);\n                if (numberValue && numberValue <= 9 && numberValue >= 1) {\n                  initial[index][cellIndex] = Number.parseInt(e.target.value);\n                } else {\n                  e.target.value = \"\";\n                }\n              },\n              className: \"input-cell\",\n              contentEditable: cell == 0\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["jsxDEV","_jsxDEV","Board","colors","board","numberOptions","initial","boxNumber","rowNumber","colNumber","index","Math","floor","random","rowConflict","boxConflict","colConflict","i","conflict","filter","item","row","num","length","col","box","push","console","log","map","value","className","children","id","toString","cell","cellIndex","style","backgroundColor","defaultValue","onChange","e","numberValue","Number","parseInt","target","contentEditable","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/annikasingh/Desktop/hi/sudoku/src/components/Board.tsx"],"sourcesContent":["import \"../styles/board.css\";\n\ntype Board = {\n  num: number;\n  box: number;\n  row: number;\n  col: number;\n};\n\nexport default function Board() {\n  const colors = [\n    \"#DAB49D\",\n    \"#F29559\",\n    \"#F2D492\",\n    \"#A9C5A0\",\n    \"#9DCBBA\",\n    \"#779FA1\",\n    \"#92817A\",\n    \"#979B8D\",\n    \"#F1DABF\", //#DAB49D pink\n  ];\n\n  let board: Board[] = [];\n  let numberOptions = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  let initial: number[][] = [];\n  let boxNumber = 0;\n  let rowNumber = 0;\n  let colNumber = 0;\n  let index = Math.floor(Math.random() * 8);\n  let rowConflict = false,\n    boxConflict = false,\n    colConflict = false;\n  for (let i = 0; i < 81; i++) {\n    rowNumber = Math.floor(i / 9);\n    colNumber = i % 3;\n    boxNumber++;\n    let conflict = true;\n    while (conflict) {\n      rowConflict =\n        board.filter((item) => item.row == rowNumber && item.num == index + 1)\n          .length > 0;\n      colConflict =\n        board.filter((item) => item.col == colNumber && item.num == index + 1)\n          .length > 0;\n      boxConflict =\n        board.filter((item) => item.box == boxNumber && item.num == index + 1)\n          .length > 0;\n      index = Math.floor(Math.random() * 8);\n      conflict = rowConflict || boxConflict || colConflict;\n    }\n    board.push({\n      num: index,\n      col: colNumber,\n      row: rowNumber,\n      box: boxNumber,\n    });\n  }\n  console.log(board);\n  numberOptions.map((value) => {\n    numberOptions.map((value, index) => {\n      let box = board\n        .filter((item) => item.box == index && item.num == numberOptions[index])\n        .map((item) => item.num);\n      initial.push(box);\n    });\n  });\n  return (\n    <div className=\"board\">\n      {initial.map((box, index) => {\n        return (\n          <div className=\"grid-box\" id={index.toString()}>\n            {box.map((cell, cellIndex) => {\n              return (\n                <div\n                  className=\"cell-item\"\n                  id={cellIndex.toString()}\n                  style={{ backgroundColor: colors[index] }}\n                >\n                  <input\n                    defaultValue={cell != 0 ? cell : \"\"}\n                    onChange={(e) => {\n                      let numberValue = Number.parseInt(e.target.value);\n                      if (numberValue && numberValue <= 9 && numberValue >= 1) {\n                        initial[index][cellIndex] = Number.parseInt(\n                          e.target.value\n                        );\n                      } else {\n                        e.target.value = \"\";\n                      }\n                    }}\n                    className=\"input-cell\"\n                    contentEditable={cell == 0}\n                  />\n                </div>\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}