{"ast":null,"code":"// JS program to implement the approach\nexport class Sudoku {\n  // Constructor\n  constructor(N, K) {\n    // Initialize all entries as false to indicate\n    // that there are no edges initially\n    this.mat = this.mat = Array.from({\n      length: N\n    }, () => Array.from({\n      length: N\n    }, () => 0));\n  }\n\n  // Sudoku Generator\n  fillValues() {\n    // Fill the diagonal of SRN x SRN matrices\n    this.DiagonalBoxes();\n\n    // Fill remaining blocks\n    this.fillRemaining(0, 3);\n\n    // Remove Randomly K digits to make game\n    //this.removeKDigits();\n  }\n\n  // Fill the diagonal SRN number of SRN x SRN matrices\n  // fillDiagonal() {\n  //   for (let i = 0; i < this.N; i += this.SRN) {\n  //     // for diagonal box, start coordinates->i==j\n  //     this.fillBox(i, i);\n  //   }\n  // }\n\n  DiagonalBoxes() {\n    for (let i = 0; i < 9; i += 4) {\n      let numbers = shuffleArray(Array.from(Array(9).keys()).map(num => num + 1));\n      for (let itemNumber = 0; itemNumber < 9; itemNumber++) {\n        let sudokuItem = numbers.pop() || 8;\n        let rowNumber = Math.floor(itemNumber / 3);\n        let colNumber = itemNumber % 3;\n        let boxNumber = i;\n        board.push({\n          box: boxNumber,\n          row: rowNumber,\n          num: sudokuItem,\n          col: colNumber\n        });\n      }\n    }\n  }\n\n  // Returns false if given 3 x 3 block contains num.\n  unUsedInBox(rowStart, colStart, num) {\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (this.mat[rowStart + i][colStart + j] === num) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  // Fill a 3 x 3 matrix.\n  fillBox(row, col) {\n    let num = 0;\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        while (true) {\n          num = this.randomGenerator(this.N);\n          if (this.unUsedInBox(row, col, num)) {\n            break;\n          }\n        }\n        this.mat[row + i][col + j] = num;\n      }\n    }\n  }\n\n  // Random generator\n  randomGenerator(num) {\n    return Math.floor(Math.random() * num + 1);\n  }\n\n  // Check if safe to put in cell\n  checkIfSafe(i, j, num) {\n    return this.unUsedInRow(i, num) && this.unUsedInCol(j, num) && this.unUsedInBox(i - i % 3, j - j % 3, num);\n  }\n\n  // check in the row for existence\n  unUsedInRow(i, num) {\n    return this.mat.filter(item => item.row == i && item.num == num).length > 0;\n  }\n\n  // check in the row for existence\n  unUsedInCol(j, num) {\n    return this.mat.filter(item => item.col == j && item.num == num).length > 0;\n  }\n\n  // A recursive function to fill remaining\n  // matrix\n  fillRemaining(i, j) {\n    // Check if we have reached the end of the matrix\n    if (i === 8 && j === 8) {\n      return true;\n    }\n\n    // Move to the next row if we have reached the end of the current row\n    if (j === 8) {\n      i += 1;\n      j = 0;\n    }\n\n    // Skip cells that are already filled\n    if (this.mat[i][j] !== 0) {\n      return this.fillRemaining(i, j + 1);\n    }\n\n    // Try filling the current cell with a valid value\n    for (let num = 1; num <= this.N; num++) {\n      if (this.checkIfSafe(i, j, num)) {\n        this.mat[i][j] = num;\n        if (this.fillRemaining(i, j + 1)) {\n          return true;\n        }\n        this.mat[i][j] = 0;\n      }\n    }\n\n    // No valid value was found, so backtrack\n    return false;\n  }\n\n  // Print sudoku\n  // printSudoku() {\n  //   for (let i = 0; i < this.N; i++) {\n  //     console.log(this.mat[i].join(\" \"));\n  //   }\n  // }\n\n  // // Remove the K no. of digits to\n  // // complete game\n  // removeKDigits() {\n  //   let count = this.K;\n\n  //   while (count !== 0) {\n  //     // extract coordinates i and j\n  //     let i = Math.floor(Math.random() * this.N);\n  //     let j = Math.floor(Math.random() * this.N);\n  //     if (this.mat[i][j] !== 0) {\n  //       count--;\n  //       this.mat[i][j] = 0;\n  //     }\n  //   }\n\n  // return;\n  // }\n}\n\n// // Driver code\n// let N = 9;\n// let K = 40;\n// let sudoku = new Sudoku(N, K);\n// sudoku.fillValues();\n// sudoku.printSudoku();\n\n// This code is contributed by phasing17.\n\nfunction shuffleArray(array) {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}","map":{"version":3,"names":["Sudoku","constructor","N","K","mat","Array","from","length","fillValues","DiagonalBoxes","fillRemaining","i","numbers","shuffleArray","keys","map","num","itemNumber","sudokuItem","pop","rowNumber","Math","floor","colNumber","boxNumber","board","push","box","row","col","unUsedInBox","rowStart","colStart","j","fillBox","randomGenerator","random","checkIfSafe","unUsedInRow","unUsedInCol","filter","item","array","temp"],"sources":["/Users/annikasingh/Desktop/hi/sudoku/src/components/Sudoku.js"],"sourcesContent":["// JS program to implement the approach\nexport class Sudoku {\n  // Constructor\n  constructor(N, K) {\n    // Initialize all entries as false to indicate\n    // that there are no edges initially\n    this.mat = this.mat = Array.from(\n      {\n        length: N,\n      },\n      () =>\n        Array.from(\n          {\n            length: N,\n          },\n          () => 0\n        )\n    );\n  }\n\n  // Sudoku Generator\n  fillValues() {\n    // Fill the diagonal of SRN x SRN matrices\n    this.DiagonalBoxes();\n\n    // Fill remaining blocks\n    this.fillRemaining(0, 3);\n\n    // Remove Randomly K digits to make game\n    //this.removeKDigits();\n  }\n\n  // Fill the diagonal SRN number of SRN x SRN matrices\n  // fillDiagonal() {\n  //   for (let i = 0; i < this.N; i += this.SRN) {\n  //     // for diagonal box, start coordinates->i==j\n  //     this.fillBox(i, i);\n  //   }\n  // }\n\n  DiagonalBoxes() {\n    for (let i = 0; i < 9; i += 4) {\n      let numbers = shuffleArray(\n        Array.from(Array(9).keys()).map((num) => num + 1)\n      );\n      for (let itemNumber = 0; itemNumber < 9; itemNumber++) {\n        let sudokuItem = numbers.pop() || 8;\n        let rowNumber = Math.floor(itemNumber / 3);\n        let colNumber = itemNumber % 3;\n        let boxNumber = i;\n        board.push({\n          box: boxNumber,\n          row: rowNumber,\n          num: sudokuItem,\n          col: colNumber,\n        });\n      }\n    }\n  }\n\n  // Returns false if given 3 x 3 block contains num.\n  unUsedInBox(rowStart, colStart, num) {\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (this.mat[rowStart + i][colStart + j] === num) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  // Fill a 3 x 3 matrix.\n  fillBox(row, col) {\n    let num = 0;\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        while (true) {\n          num = this.randomGenerator(this.N);\n          if (this.unUsedInBox(row, col, num)) {\n            break;\n          }\n        }\n        this.mat[row + i][col + j] = num;\n      }\n    }\n  }\n\n  // Random generator\n  randomGenerator(num) {\n    return Math.floor(Math.random() * num + 1);\n  }\n\n  // Check if safe to put in cell\n  checkIfSafe(i, j, num) {\n    return (\n      this.unUsedInRow(i, num) &&\n      this.unUsedInCol(j, num) &&\n      this.unUsedInBox(i - (i % 3), j - (j % 3), num)\n    );\n  }\n\n  // check in the row for existence\n  unUsedInRow(i, num) {\n    return (\n      this.mat.filter((item) => item.row == i && item.num == num).length > 0\n    );\n  }\n\n  // check in the row for existence\n  unUsedInCol(j, num) {\n    return (\n      this.mat.filter((item) => item.col == j && item.num == num).length > 0\n    );\n  }\n\n  // A recursive function to fill remaining\n  // matrix\n  fillRemaining(i, j) {\n    // Check if we have reached the end of the matrix\n    if (i === 8 && j === 8) {\n      return true;\n    }\n\n    // Move to the next row if we have reached the end of the current row\n    if (j === 8) {\n      i += 1;\n      j = 0;\n    }\n\n    // Skip cells that are already filled\n    if (this.mat[i][j] !== 0) {\n      return this.fillRemaining(i, j + 1);\n    }\n\n    // Try filling the current cell with a valid value\n    for (let num = 1; num <= this.N; num++) {\n      if (this.checkIfSafe(i, j, num)) {\n        this.mat[i][j] = num;\n        if (this.fillRemaining(i, j + 1)) {\n          return true;\n        }\n        this.mat[i][j] = 0;\n      }\n    }\n\n    // No valid value was found, so backtrack\n    return false;\n  }\n\n  // Print sudoku\n  // printSudoku() {\n  //   for (let i = 0; i < this.N; i++) {\n  //     console.log(this.mat[i].join(\" \"));\n  //   }\n  // }\n\n  // // Remove the K no. of digits to\n  // // complete game\n  // removeKDigits() {\n  //   let count = this.K;\n\n  //   while (count !== 0) {\n  //     // extract coordinates i and j\n  //     let i = Math.floor(Math.random() * this.N);\n  //     let j = Math.floor(Math.random() * this.N);\n  //     if (this.mat[i][j] !== 0) {\n  //       count--;\n  //       this.mat[i][j] = 0;\n  //     }\n  //   }\n\n  // return;\n  // }\n}\n\n// // Driver code\n// let N = 9;\n// let K = 40;\n// let sudoku = new Sudoku(N, K);\n// sudoku.fillValues();\n// sudoku.printSudoku();\n\n// This code is contributed by phasing17.\n\nfunction shuffleArray(array) {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}